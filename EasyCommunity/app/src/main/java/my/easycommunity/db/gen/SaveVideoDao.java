package my.easycommunity.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import my.easycommunity.db.gen.dbTable.SaveVideo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SAVE_VIDEO".
*/
public class SaveVideoDao extends AbstractDao<SaveVideo, Long> {

    public static final String TABLENAME = "SAVE_VIDEO";

    /**
     * Properties of entity SaveVideo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Thumburl = new Property(2, String.class, "thumburl", false, "THUMBURL");
        public final static Property Videouri = new Property(3, String.class, "videouri", false, "VIDEOURI");
        public final static Property Tittle = new Property(4, String.class, "tittle", false, "TITTLE");
    }


    public SaveVideoDao(DaoConfig config) {
        super(config);
    }
    
    public SaveVideoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SAVE_VIDEO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERNAME\" TEXT NOT NULL ," + // 1: username
                "\"THUMBURL\" TEXT NOT NULL ," + // 2: thumburl
                "\"VIDEOURI\" TEXT NOT NULL ," + // 3: videouri
                "\"TITTLE\" TEXT);"); // 4: tittle
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAVE_VIDEO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SaveVideo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUsername());
        stmt.bindString(3, entity.getThumburl());
        stmt.bindString(4, entity.getVideouri());
 
        String tittle = entity.getTittle();
        if (tittle != null) {
            stmt.bindString(5, tittle);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SaveVideo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUsername());
        stmt.bindString(3, entity.getThumburl());
        stmt.bindString(4, entity.getVideouri());
 
        String tittle = entity.getTittle();
        if (tittle != null) {
            stmt.bindString(5, tittle);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SaveVideo readEntity(Cursor cursor, int offset) {
        SaveVideo entity = new SaveVideo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // username
            cursor.getString(offset + 2), // thumburl
            cursor.getString(offset + 3), // videouri
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // tittle
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SaveVideo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.getString(offset + 1));
        entity.setThumburl(cursor.getString(offset + 2));
        entity.setVideouri(cursor.getString(offset + 3));
        entity.setTittle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SaveVideo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SaveVideo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SaveVideo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
